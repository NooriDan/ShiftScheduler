#############################################################################
Some notes for development
#############################################################################

project/
├── src/
│   ├── module1/
│   └── module2/
├── tests/
│   ├── test_module1.py
│   ├── test_module2.py
│   ├── fixtures/  # Shared test data or setups
│   └── integration/  # Integration tests
├── requirements.txt
└── pyproject.toml


***** 1 *****
A module can be organized as follows:
mymodule/
├── __init__.py  # Marks this directory as a package
├── submodule1.py
├── submodule2.py
└── utils.py
for example:
mymodule/
├── __init__.py
├── utils.py        # Utility functions
├── models.py       # Domain models or core logic
└── api.py          # API endpoints or interactions

then the __init__.py could include:
# mymodule/__init__.py
from .models import MyModel
from .utils import helper_function

which a user can import everything by:
from mymodule import MyModel, helper_function


***** 2 *****
Examples of What the tests Directory Contains
- Unit Tests: Verify individual components (e.g., functions or classes).
- Integration Tests: Check the interaction between multiple components.
- Functional Tests: Test the application as a whole against requirements.
- Regression Tests: Ensure no new code introduces bugs in existing functionality.

You can run the tests in the tests/ folder by running 
pytest tests/


==== pyproject.toml ====
[project.scripts]
command-name = "module:function"
========================